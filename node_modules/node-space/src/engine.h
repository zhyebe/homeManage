
#ifndef _ENGINE_H_
#define _ENGINE_H_

#include <stdbool.h>
#include <stdint.h>
#include <string.h>

#define EDCODER_NONE   1
#define EDCODER_LENGTH 2

#ifdef _WIN32
	#define ENGINE_API __declspec(dllexport)
#else
	#define ENGINE_API extern
#endif

typedef void (*app_callback)(void* ud_, int sig_, char* data_, int siz_);
typedef void* (*engine_Allocf)(void* ud_, void* ptr_, int osiz_, int nsiz_);
typedef void (*engine_timeout_callback_t)(void* ud_, int no_);
typedef void (*engine_fdev_callback_t)(void* ud_, int fd_, int ev_);

typedef void (*vsock_binded_t)(void* ud_, int fd_, char* addr_);
typedef void (*vsock_accepted_t)(void* ud_, int ld, int fd_, char* addr_);
typedef void (*vsock_connected_t)(void* ud_, int fd_, bool success_, char* addr_);
typedef void (*vsock_recv_t)(void* ud_, int fd_, char* data_, int siz_);
typedef void (*vsock_recvfrom_t)(void* ud_, int fd_, char* data_, int siz_, char* addr_);
typedef void (*vsock_closed_t)(void* ud_, int fd_);
typedef void (*vsock_status_t)(void* ud_, int fd_);

ENGINE_API void* vsock_new(void* E_, int edcoder_);
ENGINE_API void vsock_destroy(void* E_, void* sock_);
ENGINE_API int vsock_bind(void* sock_, char* addr_);
ENGINE_API int vsock_connect(void* sock_, char* addr_);
ENGINE_API void vsock_send(void* sock_, int fd_, char* data_, int siz_);
ENGINE_API void vsock_sendto(void* sock_, int fd_, char* data_, int siz_, char* addr_);
ENGINE_API void vsock_close(void* sock_, int fd_);
ENGINE_API void vsock_join(void* sock__, int fd_, const char* addr_);
ENGINE_API void vsock_unjoin(void* sock__, int fd_, const char* addr_);
ENGINE_API void vsock_attach(void* sock__, int fd_, char* addr_);
ENGINE_API void vsock_unattach(void* sock__, int fd_);
//ENGINE_API void vsock_setbalancing(void* sock__, int fd_, bool isload_balancing_);

ENGINE_API void vsock_registerbinded(void* sock_, void* ud_, vsock_binded_t cb_);
ENGINE_API void vsock_registeraccepted(void* sock_, void* ud_, vsock_accepted_t cb_);
ENGINE_API void vsock_registerconnected(void* sock_, void* ud_, vsock_connected_t cb_);
ENGINE_API void vsock_registerrecv(void* sock_, void* ud_, vsock_recv_t cb_);
ENGINE_API void vsock_unregisterrecv(void* sock_, void* ud_);
ENGINE_API void vsock_registerrecvfrom(void* sock_, void* ud_, vsock_recvfrom_t cb_);
ENGINE_API void vsock_registerclosed(void* sock_, void* ud_, vsock_closed_t cb_);
ENGINE_API void vsock_registerstatus(void* sock_, void* ud_, vsock_status_t cb_);

ENGINE_API void* engine_init(int nthread_);
ENGINE_API void engine_postm(void* E_, int to_, int sig_, char* data_, int siz_);
ENGINE_API void engine_postmex(void* E_, int to_, int sig_, char* data_, int siz_, void* next_);
ENGINE_API engine_Allocf engine_getallocf(void* E_, void** ud_);
ENGINE_API engine_Allocf engine_getallocf_e(void* E_, void** ud_, int eno_);
ENGINE_API int engine_settimer(void* E_, void* ud_, engine_timeout_callback_t cb_, unsigned interval_);
ENGINE_API void engine_canceltimer(void* E_, int no_);
ENGINE_API int engine_current(void* E_);
ENGINE_API void engine_interrupt(void* E_);
ENGINE_API void engine_idle(void* E__, int millisec_);
ENGINE_API bool engine_pipefull(void* E_, int to_);
ENGINE_API int engine_pollonce(void* E_, unsigned int time_);
ENGINE_API void engine_polladd(void* E_, int fd_);
ENGINE_API void engine_pollrm(void* E_, int fd_);
//ENGINE_API void engine_pollsetpri(void* E_, int fd_, int pri_);
//ENGINE_API void engine_pollresetpri(void* E_, int fd_);
ENGINE_API void engine_pollsetin(void* E_, int fd_);
ENGINE_API void engine_pollresetin(void* E_, int fd_);
ENGINE_API void engine_pollsetout(void* E_, int fd_);
ENGINE_API void engine_pollresetout(void* E_, int fd_);
ENGINE_API void engine_pollsetexcept(void* E_, int fd_);
ENGINE_API void engine_pollresetexcept(void* E_, int fd_);
ENGINE_API bool engine_polltestout(void* E_, int fd_, unsigned int time_); 
ENGINE_API bool engine_polltestin(void* E_, int fd_, unsigned int time_);
ENGINE_API void engine_registerapp(void* E_, int engineno_, const char* name_, void* ud_, app_callback cb);
ENGINE_API void engine_unregisterapp(void* E_, int engineno_, const char* name_);

ENGINE_API void engine_registerfdev(void* E_, int fd_, void* ud_, engine_fdev_callback_t cb_);
ENGINE_API void engine_unregisterfdev(void* E_, int fd_);

ENGINE_API void* engine_getapp(void* E_, int engineno_, const char* name_);
ENGINE_API void engine_start(void* E_);
ENGINE_API void engine_work(void* E_);
ENGINE_API void engine_stop(void* E_);
ENGINE_API void engine_destroy(void* E_);

ENGINE_API void engine_initsocket(void* E_);
ENGINE_API void engine_destroysocket(void* E_);

ENGINE_API void* engine_allocfraw(void* ud_, void* ptr_, int osiz_, int nsiz_);
#define xmemcpy memcpy
#define xzero(src_, siz_) memset(src_, 0, siz_)
#define xmemcmp memcmp
#define xmalloc malloc

#include <stdio.h>

#define xassert(__e) if(!(__e)) { FILE* _log = fopen("log.txt", "ab");	\
	  if (_log) {							\
	       char _msg[256];						\
	       sprintf(_msg, "assert: %s %d %s\n", __FILE__, __LINE__, #__e);	\
	       fwrite(_msg, strlen(_msg), 1, _log);			\
	       fclose(_log);						\
	  }								\
	  exit(0);							\
     }

     
#define xlog(log_) if (log_) {FILE* _log = fopen("log.txt", "ab");	\
                        if (_log) { \
                             fwrite(log_, strlen(log_), 1, _log); \
                             fclose(_log); \
                        } \
                   }

#endif // _ENGINE_H_
